1.) How does cpu knows Interrupt occurs ? How control will transfer to the Interrupts ?
Ans.) An interrupt is a signal that notifies the CPU that an event or condition requires its attention. Interrupts can be generated by hardware devices, such as keyboards, mice, timers, or disk drives, or by software instructions, such as system calls or exceptions.

The CPU knows that an interrupt occurs by checking a special hardware line called the interrupt request (IRQ) line. The IRQ line is connected to the interrupt controller, which is a device that manages the interrupts from different sources and assigns them priority levels. The interrupt controller sends a signal to the CPU through the IRQ line when an interrupt is pending. The CPU periodically checks the IRQ line between the execution of instructions. If the IRQ line is high, it means that an interrupt has occurred and the CPU needs to handle it.

2.) How does control transfer to the interrupts?
The control transfers to the interrupts by following these steps:

a. The CPU saves the current state of the execution, such as the program counter, the processor flags, and the registers, on a stack. This allows the CPU to resume the interrupted program later.
b. The CPU acknowledges the interrupt by sending a signal to the interrupt controller. The interrupt controller then sends a number to the CPU that identifies the source and type of the interrupt. This number is called the interrupt vector.
c. The CPU uses the interrupt vector as an index to a table of addresses called the interrupt vector table (IVT). The IVT is stored in a fixed location in memory and contains the addresses of the interrupt handlers or interrupt service routines (ISRs). An ISR is a special block of code that performs the tasks associated with a specific interrupt.
d. The CPU jumps to the address of the ISR corresponding to the interrupt vector and executes it. The ISR performs some actions to handle the interrupt, such as reading data from a device, sending data to a device, or performing some calculations. The ISR may also communicate with other components in the system using special instructions called secure monitor calls (SMCs).
e. The ISR returns control to the CPU by executing a return from interrupt (RTI) instruction. The RTI instruction pops the saved state of the execution from the stack and restores it to the CPU. The CPU then resumes the interrupted program from where it left off.

3.) What are Interrupts? How many are there?
Ans.) Interrupts are signals that inform the processor that an event needs its immediate attention. They can be generated by hardware devices or by software instructions. Interrupts allow the processor to stop the current execution and switch to a different task, such as handling an input/output request or an error condition.

There are different types of interrupts, such as hardware interrupts, software interrupts, traps, exceptions, and system calls. Each type of interrupt has a different purpose and priority. Hardware interrupts are usually triggered by external devices, such as keyboards, mice, disk controllers, timers, etc. Software interrupts are usually triggered by programs that need to request a service from the operating system or the processor. Traps are software interrupts that are caused by errors or exceptions in the program execution, such as division by zero, invalid memory access, etc. Exceptions are similar to traps, but they can be handled and resumed by the program. System calls are software interrupts that allow a user program to access system resources or services, such as file operations, network communication, etc.

The number of interrupts that a processor can handle depends on its architecture and design. Some processors have a fixed number of interrupt lines or pins that connect to external devices. Others have a programmable interrupt controller (PIC) that can manage multiple interrupt sources and assign them different priorities. Some processors also support nested or vectored interrupts, which allow handling multiple interrupts at the same time or invoking specific interrupt handlers based on the interrupt source.
